using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Defender
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        KeyboardState oldKB;
        SpriteBatch spriteBatch;
        Rectangle playerShip;
        Rectangle Bullet;
        int bulX;
        int bulY;
        int colR;
        int colB;
        int colG;
        int r;
        int g;
        int b;
        Color mainCol;
        Texture2D Back;
        Texture2D shipTex;
        Texture2D blue;
        Texture2D white;
        Rectangle bg;
        
        
        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here
            colR = 0;
            colG = 175;
            colB = 255;
            r = 1;
            g = 1;
            b = -1;
            bulX = playerShip.X;
            bulY = playerShip.Y;
            oldKB = Keyboard.GetState();
            int screenWidth = graphics.GraphicsDevice.Viewport.Width;
            int screenHeight = graphics.GraphicsDevice.Viewport.Height;
            bg = new Rectangle(0, 0, screenWidth, screenHeight);
            playerShip = new Rectangle(250, 250, 50, 30);
            
            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            // TODO: use this.Content to load your game content here
            Back = Content.Load<Texture2D>("Backround");
            shipTex = Content.Load<Texture2D>("Ship");
            blue = Content.Load<Texture2D>("Blue");
            white = Content.Load<Texture2D>("White Square (3)");
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            KeyboardState kb = Keyboard.GetState();
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || kb.IsKeyDown(Keys.Escape))
                this.Exit();
            colR = colR + r;
            colG = colG + g;
            colB = colB + b;

            if (colR == 255)
            {
                r *= -1;
            }
            if (colG == 255)
            {
                g *= -1;
            }
            if (colB == 255)
            {
                b *= -1;
            }
            if (colR == 0)
            {
                r *= -1;
            }
            
            if (colG == 0)
            {
                g *= -1;
            }
            
            if (colB == 0)
            {
                b *= -1;
            }

            if (!kb.IsKeyDown(Keys.Space))
            {
                Bullet = new Rectangle(playerShip.X + 12, playerShip.Y + 15, 25, 2);
                
            }

            mainCol = new Color(colR, colG, colB);

            oldKB = kb;
            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            // TODO: Add your drawing code here
            spriteBatch.Begin();
            spriteBatch.Draw(Back, bg, Color.White);
            spriteBatch.Draw(white, Bullet, mainCol);
            
            /*for (int i = 0; i < bul.Count; i++)
            {

                spriteBatch.Draw(blue, bul[i], Color.White);
            }*/
            
            spriteBatch.End();
            base.Draw(gameTime);
        }
    }
}
